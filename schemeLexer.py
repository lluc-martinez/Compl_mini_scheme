# Generated from scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,121,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,4,2,45,8,2,11,2,12,2,46,1,2,1,2,4,2,51,8,2,11,2,12,
        2,52,3,2,55,8,2,1,3,1,3,1,3,1,3,3,3,61,8,3,1,4,1,4,1,4,1,4,5,4,67,
        8,4,10,4,12,4,70,9,4,1,4,1,4,1,5,1,5,5,5,76,8,5,10,5,12,5,79,9,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,4,17,107,
        8,17,11,17,12,17,108,1,17,1,17,1,18,1,18,5,18,115,8,18,10,18,12,
        18,118,9,18,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        1,0,6,1,0,48,57,2,0,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,129,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,1,0,
        0,0,5,44,1,0,0,0,7,60,1,0,0,0,9,62,1,0,0,0,11,73,1,0,0,0,13,80,1,
        0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,19,86,1,0,0,0,21,88,1,0,0,0,23,
        90,1,0,0,0,25,92,1,0,0,0,27,95,1,0,0,0,29,97,1,0,0,0,31,100,1,0,
        0,0,33,102,1,0,0,0,35,106,1,0,0,0,37,112,1,0,0,0,39,40,5,40,0,0,
        40,2,1,0,0,0,41,42,5,41,0,0,42,4,1,0,0,0,43,45,7,0,0,0,44,43,1,0,
        0,0,45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,54,1,0,0,0,48,50,
        5,46,0,0,49,51,7,0,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,
        52,53,1,0,0,0,53,55,1,0,0,0,54,48,1,0,0,0,54,55,1,0,0,0,55,6,1,0,
        0,0,56,57,5,35,0,0,57,61,5,116,0,0,58,59,5,35,0,0,59,61,5,102,0,
        0,60,56,1,0,0,0,60,58,1,0,0,0,61,8,1,0,0,0,62,68,5,34,0,0,63,67,
        8,1,0,0,64,65,5,92,0,0,65,67,9,0,0,0,66,63,1,0,0,0,66,64,1,0,0,0,
        67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,68,1,
        0,0,0,71,72,5,34,0,0,72,10,1,0,0,0,73,77,7,2,0,0,74,76,7,3,0,0,75,
        74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,12,1,0,0,
        0,79,77,1,0,0,0,80,81,5,39,0,0,81,14,1,0,0,0,82,83,5,43,0,0,83,16,
        1,0,0,0,84,85,5,45,0,0,85,18,1,0,0,0,86,87,5,42,0,0,87,20,1,0,0,
        0,88,89,5,47,0,0,89,22,1,0,0,0,90,91,5,60,0,0,91,24,1,0,0,0,92,93,
        5,60,0,0,93,94,5,61,0,0,94,26,1,0,0,0,95,96,5,62,0,0,96,28,1,0,0,
        0,97,98,5,62,0,0,98,99,5,61,0,0,99,30,1,0,0,0,100,101,5,61,0,0,101,
        32,1,0,0,0,102,103,5,60,0,0,103,104,5,62,0,0,104,34,1,0,0,0,105,
        107,7,4,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,
        109,1,0,0,0,109,110,1,0,0,0,110,111,6,17,0,0,111,36,1,0,0,0,112,
        116,5,59,0,0,113,115,8,5,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,
        114,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,
        120,6,18,0,0,120,38,1,0,0,0,10,0,46,52,54,60,66,68,77,108,116,1,
        6,0,0
    ]

class schemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    NUMBER = 3
    BOOLEAN = 4
    STRING = 5
    IDENTIFIER = 6
    QUOTE = 7
    PLUS = 8
    MINUS = 9
    STAR = 10
    SLASH = 11
    LT = 12
    LE = 13
    GT = 14
    GE = 15
    EQUAL = 16
    NOT_EQUAL = 17
    WS = 18
    COMMENT = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'''", "'+'", "'-'", "'*'", "'/'", "'<'", "'<='", 
            "'>'", "'>='", "'='", "'<>'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOLEAN", "STRING", "IDENTIFIER", "QUOTE", "PLUS", 
            "MINUS", "STAR", "SLASH", "LT", "LE", "GT", "GE", "EQUAL", "NOT_EQUAL", 
            "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "NUMBER", "BOOLEAN", "STRING", "IDENTIFIER", 
                  "QUOTE", "PLUS", "MINUS", "STAR", "SLASH", "LT", "LE", 
                  "GT", "GE", "EQUAL", "NOT_EQUAL", "WS", "COMMENT" ]

    grammarFileName = "scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


